#!/usr/bin/env bash

set -Eeuo pipefail
trap cleanup SIGINT SIGTERM ERR EXIT

SCRIPTDIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)
SCRIPTNAME="$(basename "${BASH_SOURCE[0]}")"

setup_colors() {
	if [[ -t 2 ]] && (( ! "$nocolors" )) && [[ "${TERM-}" != "dumb" ]]
	then
		NOFORMAT='\033[0m'
		RED='\033[0;31m' GREEN='\033[0;32m' BLUE='\033[0;34m'
		ORANGE='\033[0;33m' PURPLE='\033[0;35m' CYAN='\033[0;36m'
		YELLOW='\033[1;33m' BOLD='\033[1m'
	else
		NOFORMAT='' RED='' GREEN='' BLUE='' ORANGE='' PURPLE='' CYAN=''
		YELLOW='' BOLD=''
	fi
}
# Standard return codes and meanings from FreeBSD SYSEXITS(3)
# The choice of an appropriate exit value is often ambiguous
# 1, 2, 126 - ~140 and 255 (so -1) error codes are reserved:
#   https://tldp.org/LDP/abs/html/exitcodes.html
EX_OK=0			# It's all right (error undetected yet)
EX_USAGE=64		# Incorrect command usage (args / values)
EX_DATAERR=65		# Incorrect *user* provided input data (parse)
EX_NOINPUT=66		# Unreadable *user* provided input (perm / enoent)
EX_NOUSER=67		# Specified user did not exist (wherever)
EX_NOHOST=68		# Specified host did not exist (wherever)
EX_UNAVAILABLE=69	# Some service is unavailable
			# (remote, support program or file)
EX_SOFTWARE=70		# Internal software error (it's you)
EX_OSERR=71		# System error (cannot fork / pipe / allocate)
EX_OSFILE=72		# Failed to parse system file (perm / enoent / parse)
EX_CANTCREAT=73		# User specified output file can't be created
EX_IOERR=74		# Error occured while doing I/O
EX_TEMPFAIL=75		# Temporary failure (should retry later)
EX_PROTOCOL=76		# Protocol error (don't agree / understand)
EX_NOPERM=77		# Invoking user not permitted to execute operation
EX_CONFIG=78		# Something found inconfigured or misconfigured
msg() {
	echo >&2 -e "$@"
}

die() {
	local msg=$1
	local code=${2-1} # default exit status 1

	msg "$msg"
	exit "$code"
}
usage() {
	local exitcode="${1-0}"
	local reason="${2-}"

	[[ ! -z "$reason" ]] && printf "%s: %s\n\n" "$SCRIPTNAME" "$reason"

	# TODO: Specific options documentation here
	cat <<EOF
Usage: ${PURPLE-}$SCRIPTNAME${NOFORMAT-} [-EfhTv]

${YELLOW-}Program description in one or some lines..${NOFORMAT-}

Available options:

   -E PYENV		Use Pyenv environment PYENV
   -f			Force execution
   -h			Print this help and exit
   -T			Do not use colors
   -v			Print script debug info
EOF
	exit "$exitcode"
}

cleanup() {
	trap - SIGINT SIGTERM ERR EXIT
	# TODO: script cleanup here
}

parse_params() {
	# TODO: Default values of variables set from params
	force=0
	nocolors=0
	pyenviron=
	while getopts ":E:fhvT" o; do
		case "${o}" in
		E)
			pyenviron=${OPTARG}
			;;
		f)
			force=1
			;;
		h)
			usage $EX_OK
			;;
		v)
			set -x
			;;
		T)
			nocolors=1
			;;
		:)
			printf "Option \`%s' requires an argument.\n\n" "${OPTARG}"
			usage $EX_USAGE
			;;
		*)
			printf "Unknown option \`%s'.\n\n" "$o"
			usage $EX_USAGE
			;;
		esac
	done
	shift $((OPTIND-1))
	
	argv=("$@")

	# check required params and arguments
	[[ ${#argv[@]} -eq 0 ]] || die "This script doesn't take arguments"
	
	return 0
}

parse_params "$@"
setup_colors

# -----------------------------------------------------------------------------
# TODO: script logic here

msg "${RED}Invocation parameters:$NOFORMAT"
msg "(pyenv)    -E: $pyenviron"
msg "(force)    -f: $force"
msg "(nocolors) -T: $nocolors"
msg "${RED}---$NOFORMAT"

msg "${PURPLE}${BOLD}Moving to repository root directory$NOFORMAT"
cd "$SCRIPTDIR"/..

# TBH this is somewhat useless and here more for valued arguments showcase
# than anything else
if [[ ! -z "$pyenviron" ]]; then
	msg "${PURPLE}${BOLD}Setting Pyenv environment$NOFORMAT"
	pyenv local "$pyenviron"
fi

if (( ! "$force" )); then
	msg "${PURPLE}${BOLD}Checking for virtualenv$NOFORMAT"
	[[ -z "${VIRTUAL_ENV-}" ]] && {
		msg "${CYAN}${BOLD}Warning !!! No virtualenv means you'll " \
		    "install into a global Python installation$NOFORMAT"
		msg "${CYAN}${BOLD}Do you want to continue ? [y/N]$NOFORMAT"
		REPLY='n'
		read -t20 -n1
		case "$REPLY" in
		y|Y)
			;;
		*)
			die "Cancelling"
			;;
		esac
	}
fi

msg "${PURPLE}${BOLD}Installing Python requirements (Ansible included)" \
    "$NOFORMAT"
pip3 install -r requirements.txt

msg "${PURPLE}${BOLD}Installing Ansible requirements$NOFORMAT"
if (( "$force" )); then
	ansible-galaxy collection install -rf requirements.yaml
else
	ansible-galaxy collection install -r requirements.yaml
fi

msg "${PURPLE}${BOLD}Putting permissions$NOFORMAT"
chmod 700 var
chmod 600 etc/secrets.yaml

# vim: set ft=bash:
